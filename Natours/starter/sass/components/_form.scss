.form {
  &__group:not(:last-child) {
    // we want the margin bottom, but we don't want it on the last child
    margin-bottom: 2rem;
  }

  &__input {
    font-size: 1.5rem;
    font-family: inherit; // inherit from the parent
    color: inherit;
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba($color-white, 0.5);
    border: none;
    // after click, the next elm goes down for 3px (input:focus -> 'border-bottom'), so we need to specify this same border-bottom but transparent
    border-bottom: 3px solid transparent;
    width: 90%;
    display: block;
    transition: all 0.3s;

    @include respond(tab-port) {
      width: 100%;
    }

    &:focus {
      // blue frame around the active form
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 3px solid $color-primary;
    }

    &:focus:invalid {
      // when input from the user is invalid
      border-bottom: 3px solid $color-secondary-dark;
    }

    &::-webkit-input-placeholder {
      /* 
          color of the placeholder
      
          <input type="email" class="form__input" id="email" placeholder="Email" required>
          
          */
      color: $color-grey-dark-2;
    }
  }

  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s;
  }

  &__input:placeholder-shown + &__label {
    // + adjacent sibiling selector - next sibiling
    // ~ general sibiling selector - sibiling in any order
    // important is the order of html markups - first should be the <input> and then <label>, only then we can use the adjacent sibiling selector

    // when the placeholder is shown on the input elm, then we can style it. We do not want to style input, but the label
    opacity: 0;
    // if we set the opacity to 0, then the elm will be still visable on the page - but only invisible, when we set the visibility to hidden, then it will be really gone. We have to use opacity, because we can not animate the visibility.
    visibility: hidden;
    transform: translateY(-4rem);
  }

  &__radio-group {
    width: 49%;
    //  they will not create the line breaks, and will be displayed side by side
    display: inline-block;

    @include respond(tab-port) {
      width: 100%;
      margin-bottom: 2rem;
    }
  }

  // to hide default radio buttons
  &__radio-input {
    display: none;
  }

  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem;
  }

  //t it's our span element to pretend the button styling
  &__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary;
    border-radius: 50%;
    position: absolute;
    display: inline-block;

    left: 0;
    top: -0.4rem;

    &::after {
      // inner dot in our new radio button

      // by all pseudo elm need to specify content and display!
      content: "";
      display: block;

      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;

      //  to put the dot exactly in the center of the circle
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: $color-primary;
      opacity: 0;
      transition: opacity 0.2s;
    }
  }

  // as soon as we hit the label elm, the radio input becomes >checked<, so we have this checked pseudo-class available to us. Then we simply select the sibiling of '&__radio-input' which is '&__radio-label' and then child from radio-label - this one what we actualy need '&__radio-button::after'
  &__radio-input:checked ~ &__radio-label &__radio-button::after {
    opacity: 1;
  }
}
